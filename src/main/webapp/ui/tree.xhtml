<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:p="http://primefaces.prime.com.tr/ui"
	template="../templates/ui.xhtml">

    <ui:define name="head">
        <script type="text/javascript">
            jQuery(function() {
                jQuery('.ui-tree .ui-tree-node-label').draggable({
                    revert:'invalid',
                    helper: 'clone',
                    containment:'#j_idt59\\:j_idt60'
                });
            });

            jQuery(function() {
                jQuery('.ui-tree .ui-tree-node-content').droppable({
                    hoverClass: 'ui-state-hover',
                    drop: function(event, ui) {
                        var newParent = jQuery(this).parents('li:first'),
                        droppedNode = ui.draggable.parents('li:first'),
                        newParentChildrenContainer = newParent.children('.ui-tree-nodes'),
                        oldParent = null;

                        //ignore self dragdrop
                        if(newParent.attr('id') == droppedNode.attr('id')) {
                            return false;
                        }

                        //If newParent had no children before, make it a parent
                        if(newParentChildrenContainer.length == 0) {
                            newParent.append('<ul class="ui-tree-nodes ui-helper-reset ui-tree-child"></ul>')
                            .find('.ui-tree-node-content:first').prepend('<span class="ui-tree-icon ui-icon ui-icon-triangle-1-s"></span>')
                            .removeClass('ui-tree-item').addClass('ui-tree-parent');
                        }

                        //If old parent has no children left, make it a leaf
                        if(droppedNode.siblings().length == 0) {
                            oldParent = droppedNode.parents('li:first');
                            newParent.children('.ui-tree-nodes').append(droppedNode);
                            oldParent.removeClass('ui-tree-parent').addClass('ui-tree-item');
                            oldParent.find('.ui-tree-icon:first').remove();
                            oldParent.children('.ui-tree-nodes').remove();
                            
                        }
                        else {
                            //append droppedNode to newParent
                            newParent.children('.ui-tree-nodes').append(droppedNode);
                        }

                        droppedNode.hide().fadeIn('fast');
 
                    }
                });
            });
        </script>
    </ui:define>

	<ui:define name="content">
		<h1 class="title ui-widget-header ui-corner-all">Tree - Basic</h1>

		<div class="entry">
			<p>In it's simplest form, tree displays a server side model on client side. A pure client side tree is useful
            to create tree based navigation menus. Tree state is saved and restored based on cookie persistence.</p>

			<h:form>

				<p:tree value="#{treeBean.root}" var="node">
					<p:treeNode>
						<h:outputText value="#{node}"/>
					</p:treeNode>
				</p:tree>

                <p:commandButton value="Submit" ajax="false" style="margin-top:10px"/>

			</h:form>
			
			<h3>Source</h3>
			<p:tabView>
				<p:tab title="tree.xhtml">
					<pre name="code" class="xml">
&lt;h:form&gt;

    &lt;p:tree value="\#{treeBean.root}" var="node"&gt;
        &lt;p:treeNode&gt;
            &lt;h:outputText value="\#{node}"/&gt;
        &lt;/p:treeNode&gt;
    &lt;/p:tree&gt;

    &lt;p:commandButton value="Submit" ajax="false" /&gt;

&lt;/h:form&gt;
					</pre> 
				</p:tab>
				
				<p:tab title="TreeBean.java">
					<pre name="code" class="java">
package org.primefaces.examples.view;

import org.primefaces.model.TreeNode;
import org.primefaces.model.DefaultTreeNode;

public class TreeBean {
	
	private TreeNode root;

	public TreeBean() {
		root = new DefaultTreeNode("Root", null);
		TreeNode node0 = new DefaultTreeNode("Node 0", root);
		TreeNode node1 = new DefaultTreeNode("Node 1", root);
		TreeNode node2 = new DefaultTreeNode("Node 2", root);
		
		TreeNode node00 = new DefaultTreeNode("Node 0.0", node0);
		TreeNode node01 = new DefaultTreeNode("Node 0.1", node0);
		
		TreeNode node10 = new DefaultTreeNode("Node 1.0", node1);
		TreeNode node11 = new DefaultTreeNode("Node 1.1", node1);
		
		TreeNode node000 = new DefaultTreeNode("Node 0.0.0", node00);
		TreeNode node001 = new DefaultTreeNode("Node 0.0.1", node00);
		TreeNode node010 = new DefaultTreeNode("Node 0.1.0", node01);
		
		TreeNode node100 = new DefaultTreeNode("Node 1.0.0", node10);
	}

	public TreeNode getRoot() {
		return root;
	}
}
					</pre>
				</p:tab>
			</p:tabView>
		</div>

	</ui:define>
</ui:composition>