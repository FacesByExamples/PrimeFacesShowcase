<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:p="http://primefaces.org/ui"
	template="../templates/ui.xhtml">

    <ui:define name="head">
        <style type="text/css">
            .add {
                background-image: url(../images/add.png) !important;
            }

            .remove {
                background-image: url(../images/delete.png) !important;
            }
        </style>
    </ui:define>

	<ui:define name="content">
	<h1 class="title ui-widget-header ui-corner-all">DataTable - Dynamic Columns</h1>
		<div class="entry">
			<p>Columns of datatable can also be defined dynamically with p:columns component. Since columns are created
            on-the-fly it is easy to add/remove columns programmatically.</p>

            <h:form id="form" rependId="false">

                <h3>Simple</h3>
                <p:dataTable var="car" value="#{tableBean.carsSmall}">

                    <p:columns value="#{tableBean.simpleColumns}" var="column" columnIndexVar="colIndex" 
                                sortBy="#{car[column.property]}" filterBy="#{car[column.property]}">
                        <f:facet name="header">
                            #{column.header}
                        </f:facet>

                        #{car[column.property]}
                    </p:columns>

                </p:dataTable>
                
                
            </h:form>

		<h3>Source</h3>
		<p:tabView>
			<p:tab title="datatableDynamicColumns.xhtml">
                <pre name="code" class="xml">
&lt;h:form id="form" prependId="false"&gt;

    &lt;h3&gt;Simple&lt;/h3&gt;
    &lt;p:dataTable var="car" value="\#{tableBean.carsSmall}"&gt;
        &lt;p:columns value="\#{tableBean.simpleColumns}" var="column" columnIndexVar="colIndex"
                    sortBy="\#{car[column.property]}" filterBy="\#{car[column.property]}"&gt;
            &lt;f:facet name="header"&gt;
                \#{column.header}
            &lt;/f:facet&gt;

            \#{car[column.property]}
        &lt;/p:columns&gt;
    &lt;/p:dataTable&gt;

&lt;/h:form&gt;
				</pre>
			</p:tab>

			<p:tab title="TableBean.java">
                <pre name="code" class="java">
package org.primefaces.examples.view;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.faces.context.FacesContext;

import org.primefaces.examples.domain.Car;

public class TableBean implements Serializable {

	private final static Logger logger = Logger.getLogger(TableBean.class.getName());

	private final static String[] colors;

	private final static String[] manufacturers;

    private List&lt;ColumnModel&gt; simpleColumns;

	private String theme;

	static {
		colors = new String[10];
		colors[0] = "Black";
		colors[1] = "White";
		colors[2] = "Green";
		colors[3] = "Red";
		colors[4] = "Blue";
		colors[5] = "Orange";
		colors[6] = "Silver";
		colors[7] = "Yellow";
		colors[8] = "Brown";
		colors[9] = "Maroon";

		manufacturers = new String[10];
		manufacturers[0] = "Mercedes";
		manufacturers[1] = "BMW";
		manufacturers[2] = "Volvo";
		manufacturers[3] = "Audi";
		manufacturers[4] = "Renault";
		manufacturers[5] = "Opel";
		manufacturers[6] = "Volkswagen";
		manufacturers[7] = "Chrysler";
		manufacturers[8] = "Ferrari";
		manufacturers[9] = "Ford";
	}

	public TableBean() {
        createDynamicColumns();
	}

    private void createDynamicColumns() {
        simpleColumns = new ArrayList&lt;ColumnModel&gt;();
        simpleColumns.add(new ColumnModel("Model", "model"));
        simpleColumns.add(new ColumnModel("Manufacturer", "manufacturer"));
        simpleColumns.add(new ColumnModel("Year", "year"));
    }

    public List&lt;ColumnModel&gt; getSimpleColumns() {
        return simpleColumns;
    }

    public String[] getManufacturers() {
        return manufacturers;
    }

    public List&lt;String&gt; getAvailableManufacturers() {
        List&lt;String&gt; availableManufacturers = new ArrayList&lt;String&gt;();

        for(String manufacturer : manufacturers) {
            if(!columns.contains(manufacturer))
                availableManufacturers.add(manufacturer);
        }

        return availableManufacturers;
    }

    private int getRandomYear() {
		return (int) (Math.random() * 50 + 1960);
	}

	private String getRandomColor() {
		return colors[(int) (Math.random() * 10)];
	}

    private String getRandomModel() {
		return UUID.randomUUID().toString().substring(0, 8);
	}

    static public class ColumnModel implements Serializable {

        private String header;
        private String property;

        public ColumnModel(String header, String property) {
            this.header = header;
            this.property = property;
        }

        public String getHeader() {
            return header;
        }

        public String getProperty() {
            return property;
        }
    }
}
				</pre>
			</p:tab>
		</p:tabView>
	       </div>

	</ui:define>
</ui:composition>