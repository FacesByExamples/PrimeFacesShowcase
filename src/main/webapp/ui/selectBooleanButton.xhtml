<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:p="http://primefaces.org/ui"
	template="../templates/ui.xhtml">
    
    <ui:define name="head">
        <style type="text/css">

        </style>
        
        <script type="text/javascript">
            //<![CDATA[
/**
 * PrimeFaces SelectBooleanCheckbox Widget
 */
PrimeFaces.widget.SelectBooleanButton = function(cfg) {
    this.cfg = cfg;
    this.id = this.cfg.id;
    this.jqId = PrimeFaces.escapeClientId(this.id);
    this.jq = $(this.jqId);
    this.input = $(this.jqId + '_input');
    this.disabled = this.input.is(':disabled');
    this.icon = this.jq.children('.ui-button-icon-left');
    var _self = this;

    //bind events if not disabled
    if(!this.disabled) {
        this.jq.mouseover(function() {
            if(!_self.jq.hasClass('ui-state-active') &&Â !_self.jq.hasClass('ui-state-disabled'))
                _self.jq.addClass('ui-state-hover');
        }).mouseout(function() {
            _self.jq.removeClass('ui-state-hover');
        }).click(function() {
            _self.toggle();
        });
        
        //Client Behaviors
        if(this.cfg.behaviors) {
            PrimeFaces.attachBehaviors(this.input, this.cfg.behaviors);
        }
    }
    
    this.postConstruct();
}

PrimeFaces.extend(PrimeFaces.widget.SelectBooleanButton, PrimeFaces.widget.BaseWidget);

PrimeFaces.widget.SelectBooleanButton.prototype.toggle = function() {
    if(!this.disabled) {
        if(this.input.is(":checked"))
            this.uncheck();
        else
            this.check();
    }
}

PrimeFaces.widget.SelectBooleanButton.prototype.check = function() {
    if(!this.disabled) {
        this.input.attr('checked', 'checked');
        this.jq.addClass('ui-state-active').children('.ui-button-text').html(this.cfg.onLabel);
        
        if(this.icon.length > 0) {
            this.icon.removeClass(this.cfg.offIcon).addClass(this.cfg.onIcon);
        }

        this.input.change();
    }
}

PrimeFaces.widget.SelectBooleanButton.prototype.uncheck = function() {
    if(!this.disabled) {
        this.input.removeAttr('checked', 'checked');
        this.jq.removeClass('ui-state-active').addClass('ui-state-hover').children('.ui-button-text').html(this.cfg.offLabel);
        
        if(this.icon.length > 0) {
            this.icon.removeClass(this.cfg.onIcon).addClass(this.cfg.offIcon);
        }

        this.input.change();
    }
}
            //]]>
        </script>
    </ui:define>

	<ui:define name="content">

		<h1 class="title ui-widget-header ui-corner-all">SelectBooleanButton</h1>
		<div class="entry">
			<p>SelectButtonCheckbox is used to provide binary selection with a button UI instead of a checkbox.</p>

			<h:form>

                <p:growl id="msg" />

                <h:panelGrid columns="2" style="margin-bottom:10px" cellpadding="5">

                    <h:outputText value="I accept terms and conditions: " />
                    <p:selectBooleanButton value="#{formBean.value1}" onLabel="Yes" offLabel="No" style="width:60px" />

                    <h:outputText value="Subscribe me to newsletter: " />
                    <p:selectBooleanButton value="#{formBean.value2}" onLabel="Yes" offLabel="No" onIcon="ui-icon-check" offIcon="ui-icon-close" style="width:60px">
                        <p:ajax update="msg" listener="#{formBean.addMessage}"/>
                    </p:selectBooleanButton>

                </h:panelGrid>

                <p:commandButton value="Submit" update="display" oncomplete="dlg.show()" />

                <p:dialog header="Selected Values" modal="true" showEffect="fade" hideEffect="fade" widgetVar="dlg">
                    <h:panelGrid columns="1" id="display">
                        <h:outputText value="Value 1: #{formBean.value1}" />

                        <h:outputText value="Value 2: #{formBean.value2}" />
                    </h:panelGrid>
                </p:dialog>

			</h:form>

			<h3>Source</h3>
			<p:tabView>
				<p:tab title="selectBooleanButton.xhtml">
					<pre name="code" class="xml">
&lt;h:form&gt;

    &lt;p:growl id="msg" /&gt;

    &lt;h:panelGrid columns="2" style="margin-bottom:10px" cellpadding="5"&gt;

        &lt;h:outputText value="I accept terms and conditions: " /&gt;
        &lt;p:selectBooleanButton value="\#{formBean.value1}" onLabel="Yes" offLabel="No" /&gt;

        &lt;h:outputText value="Subscribe me to newsletter: " /&gt;
        &lt;p:selectBooleanButton value="\#{formBean.value2}" onLabel="Yes" offLabel="No" onIcon="ui-icon-check" offIcon="ui-icon-close"&gt;
            &lt;p:ajax update="msg" listener="\#{formBean.addMessage}"/&gt;
        &lt;/p:selectBooleanButton&gt;

    &lt;/h:panelGrid&gt;

    &lt;p:commandButton value="Submit" update="display" oncomplete="dlg.show()" /&gt;

    &lt;p:dialog header="Selected Values" modal="true" showEffect="fade" hideEffect="fade" widgetVar="dlg"&gt;
        &lt;h:panelGrid columns="1" id="display"&gt;
            &lt;h:outputText value="Value 1: \#{formBean.value1}" /&gt;

            &lt;h:outputText value="Value 2: \#{formBean.value2}" /&gt;
        &lt;/h:panelGrid&gt;
    &lt;/p:dialog&gt;

&lt;/h:form&gt;
					</pre>

                    </p:tab>

                    <p:tab title="FormBean.java">
                        <pre name="code" class="java">
package org.primefaces.examples.view;

import java.io.Serializable;

public class FormBean implements Serializable {

    private boolean value1;

    private boolean value2;

    public boolean isValue1() {
        return value1;
    }

    public void setValue1(boolean value1) {
        this.value1 = value1;
    }

    public boolean isValue2() {
        return value2;
    }

    public void setValue2(boolean value2) {
        this.value2 = value2;
    }

    public void addMessage() {
        String summary = value2 ? "Checked" : "Unchecked";

        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(summary));
    }
}
                        </pre>
                    </p:tab>
			</p:tabView>

		</div>

	</ui:define>
</ui:composition>